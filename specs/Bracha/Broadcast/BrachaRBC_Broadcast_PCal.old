----------------------- MODULE BrachaRBC_Broadcast_PCal -----------------------
EXTENDS Naturals, FiniteSets, Sequences, SequencesExt, TLC 

CONSTANT CN
CONSTANT FN
CONSTANT Value
CONSTANT NotValue

(*--algorithm BrachaRBC
variables
    bcNode \in AN, 
    rbc = [n |-> Cardinality(AN), f |-> Cardinality(FN), me |-> bcNode, peers |-> SetToSeq(AN), broadcaster |-> bcNode, predicate |-> TRUE, max_msg_size |-> 1000, propose_sent |-> FALSE, output |-> NotValue], 
    input \in (CASE bcNode \in CN -> Value [] bcNode \in FN -> {NotValue}),
    msgs = [node_id \in AN |-> {}]
define
    AN  == CN \cup FN       \* All nodes.
end define;

fair process handle_input = "handle_input"
variables
    me = rbc.me, 
    broadcaster = rbc.broadcaster, 
    propose_sent = rbc.propose_sent, 
    peers = rbc.peers, 
    output = rbc.output,
    peer_id,
    index = 1
begin
    handle_input:
    if broadcaster = me /\ propose_sent = FALSE then
        rbc.propose_sent := TRUE;
        iterate:
            while index <= Len(peers) do
                peer_id := peers[index];
                msgs[peer_id] := msgs[peer_id] \union {<<"PROPOSE", me, input>>};
                index := index + 1;
            end while;
            output := output;
    end if;
end process;
end algorithm;*)


===============================================================================
